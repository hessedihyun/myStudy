package j01_basic;
import jdbc02.JoDTO;
// ** 제너릭의 유용성 **
// (제너릭 사용) : 어떤 타입으로 지정해놓고 쓰고 싶을 때 - 어떤 타입이든 넣어서 제약을 걸어둘 수가 있음
// (제너릭 전) 단점 Test 참고
class Store {
	private Object data;
	public Object getData() { return data; }
	public void setData(Object data) {this.data = data;}
} // Store

class StoreG {
	private T data;
	public T getData() { return data; }
	public void setData(T data) { this.data = data; }
} // Store Generic. '아직 (타입을) 정하지 않았어요' = 알파벳 한글자 ('T' 지정) 
public class Gn01_StoreTest {
	public static void main(String[] args) {
		// 1. Object를 이용한 기존 방식
		Store s1 = new Store();
		s1.setData("짜장면");
		s1.setData(123); // int <- auto 언박싱(형변환) -> Integer 래퍼 클래스
		s1.setData(123.456); // double <- auto 언박싱(형변환)-> Double 래퍼 클래스
		s1.setData(123.456f);
		s1.setData(123456789L);
     // s1.setData(new JoDTO());
		s1.setData(new JoDTO(7,"Banana", 77,"화이팅","Generic Test"));
		System.out.println("** Test 1 => " + s1.getData());
		
//		// => 단점 Test
//		String s = (String)s1.getData();
//		// complie 타임에서는 오류가 없는데, run 타임에서는 문제가 생김(long 타입이 String으로 캐스팅 될 수 없음) : java.lan.ClassCastException
//		System.out.println("** 단점 Test => " + s);
		
		// 2. Generic StoreG
		StoreG g1 = new StoreG(); // 타입 생략 시, 1.과 동일 (Object로 지정됨)
		StoreG<String> g2 = new StoreG<String>(); // 우측은 타입 지정 안해줘도 됨
		g2.setData("스트링만 가능");
//		g2.setData(12345); // 컴파일 오류 발생
	} // main

} // class
