/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-01-15 06:55:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>** index **</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>** Dynamic Web Project **</h2>\r\n");
      out.write("\r\n");

 if (session.getAttribute("loginName")!=null) { 
      out.write(" <!--  jsp가 서블릿보다 편한 점 : request, out, response, session 등 이미 객체화되어 있음. -->\r\n");
      out.write(" 		<h3>");
      out.print(session.getAttribute("loginName"));
      out.write("님 안녕하세요~~</h3>\r\n");
 } else { 
      out.write("\r\n");
      out.write("	<h3>로그인 후 이용하세요~~</h3>\r\n");
 }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("<form action=\"getpost\" method=\"post\">\r\n");
      out.write("	<input type=\"text\" name=\"id\" value=\"banana\"/> &nbsp;\r\n");
      out.write("	<input type=\"text\" name=\"name\" value=\"바나나\"/> &nbsp;\r\n");
      out.write("	<input type=\"text\" name=\"password\"/> &nbsp;\r\n");
      out.write("	<input type=\"submit\" value=\"확인\"/> &nbsp;\r\n");
      out.write("	<!-- getpost?id=banana 여기서 id는 파라미터의 name이다.  \r\n");
      out.write("	** id, class, name 속성\r\n");
      out.write("	 id나 name 중 하나만 필요한 것은 아니다. form을 디자인하면 보통 id, name 값 둘다 필요하다.\r\n");
      out.write("	 -->\r\n");
      out.write("	<input type=\"submit\" value=\"Test\"/>\r\n");
      out.write("	\r\n");
      out.write("</form>\r\n");
      out.write("<hr>\r\n");
      out.write("<!--  ** 경로 표기\r\n");
      out.write("	=> 절대경로 : /(슬러시)로 시작, 프로젝트명부터 전체경로 표기\r\n");
      out.write("	   ex) /web01/images/letsgo.png\r\n");
      out.write("	   -> (webapp 폴더는 생략)\r\n");
      out.write("	=> 상대경로 : 현재위치에서 시작. /로 시작하면 안됨\r\n");
      out.write("	   -> ./(점 슬러시)로 시작, ../(점점 슬러시)는 1단계 상위. \r\n");
      out.write("	   ex) \"./images/letsgo.png\", \"images/letsgo.png\" 동일\r\n");
      out.write("-->\r\n");
      out.write("<!-- <img alt=\"\" src=\"/web01/images/party_parrot.gif\" width=\"300\" height=\"200\">   -->\r\n");
      out.write("<img alt=\"\" src=\"images/down.gif\" width=\"300\" height=\"200\">\r\n");
      out.write("<hr>\r\n");
      out.write("&nbsp;<a href=\"/web01/servletTestForm/flowEx04_LoginForm_ssam.jsp\">LoginForm</a>&nbsp;\r\n");
      out.write("&nbsp;<a href=\"/web01/logoutSsam\">Logout</a><br>\r\n");
      out.write("&nbsp;<a href=\"/web01/hello\">Hello</a>&nbsp;\r\n");
      out.write("&nbsp;<a href=\"/web01/list\">MVC01ListS</a>&nbsp;\r\n");
      out.write("&nbsp;<a href=\"/web01/life\">LifeCycle</a><br>\r\n");
      out.write("&nbsp;<a href=\"/web01/servletTestForm/form01_Adder.html\">Adder</a>&nbsp;\r\n");
      out.write("&nbsp;<a href=\"/web01/servletTestForm/form02_Radio.jsp\">Radio</a>&nbsp;\r\n");
      out.write("&nbsp;<a href=\"/web01/servletTestForm/form03_Check.jsp\">Check</a>&nbsp;\r\n");
      out.write("&nbsp;<a href=\"/web01/servletTestForm/form04_Select.jsp\">Select</a><br>\r\n");
      out.write("&nbsp;<a href=\"/web01/flow01\">Flow01</a>&nbsp;\r\n");
      out.write("&nbsp;<a href=\"/web01/sessioni\">SessionInfo</a>&nbsp;\r\n");
      out.write("&nbsp;<a href=\"/web01/jsp01/ex01_HelloJsp.jsp\">HelloJ</a>&nbsp;\r\n");
      out.write("&nbsp;<a href=\"/web01/jsp01/ex02_mvc01List.jsp\">M01ListJ</a>&nbsp;\r\n");
      out.write("&nbsp;<a href=\"/web01/list2\">M02List</a>&nbsp;\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
